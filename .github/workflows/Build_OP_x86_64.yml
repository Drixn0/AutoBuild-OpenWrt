#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: x86_64位固件编译

# Add a button to trigger the workflow
on: 
  repository_dispatch:
  workflow_dispatch:

  # release:
  #   types: published    

  # push:
  #   branches:
  #     - master
  #   paths:
  #     - 'config/x86_64/x86_64.config'
  
  # schedule:
  #   - cron: 0 2 * * 2

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/x86_64/x86_64.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_RELEASE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  BARK: true
  TZ: Asia/Shanghai
  FILE_NAME: OpenWRT_x86_64
  PRODUCT_NAME: OpenWRT_x86_64

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检查项目分支
      uses: actions/checkout@master
    
    - name: 环境初始化 Bark 推送
      uses: shink/bark-action@v2
      if: env.BARK == 'true' && !cancelled()
      with:
        key: ${{ secrets.BARK_KEY }}       # Your secret key, it is required
        host: ${{ secrets.BARK_HOST }}     # Your Bark host, the default is 'https://api.day.app'
        title: OpenWRT x86_64 位固件编译通知
        body: 楠神您好，您的【AutoBuild-OpenWrt】仓库的 OpenWRT x86_64 位固件编译正在初始化编译环境和配置，即将开始编译！
        sound: telegraph
        isArchive: 1
        url: ${{ secrets.BARK_URL }}
        # automaticallyCopy: 1
        # copy: Content copied to clipboard

    - name: 检查服务器配置
      run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo "云编译建议取消勾选Node.js及其相关插件！"
          echo "已知CPU型号（降序）：8370C,8272CL,8171M,E5系列"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "--------------------------硬盘信息--------------------------"
          echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "硬盘详情："
          df -Th
          echo "status=success" >> $GITHUB_OUTPUT
          
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        # 清理多余文件，腾出磁盘空间
        docker rmi $(docker images -q)

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 设置当前的日期
      id: date
      run: |
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y.%m.%d")" >> $GITHUB_ENV
        echo "DATE2=_$(date "+%Y年%m月%d日")" >> $GITHUB_ENV  
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 加载自定义feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 更新feeds
      run: cd openwrt && ./scripts/feeds update -a
  
    - name: 安装feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    # - name: SSH 连接 Actions
    #   uses: P3TERX/debugger-action@master
    #   if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')        

    - name: 下载 dl 库
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 开始编译 Bark 推送
      uses: shink/bark-action@v2
      if: env.BARK == 'true' && steps.package.outputs.status == 'success' && !cancelled()
      with:
        key: ${{ secrets.BARK_KEY }}       # Your secret key, it is required
        host: ${{ secrets.BARK_HOST }}     # Your Bark host, the default is 'https://api.day.app'
        title: OpenWRT x86_64 位固件编译通知
        body: 楠神您好，您的【AutoBuild-OpenWrt】仓库的 OpenWRT x86_64 位固件编译环境初始化完成，依赖下载完成，现在开始编译！
        sound: telegraph
        isArchive: 1
        url: ${{ secrets.BARK_URL }}
        # automaticallyCopy: 1
        # copy: Content copied to clipboard
    
    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 再次检查服务器配置
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 上传文件
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp openwrt/bin/packages/x86_64/packages/open-vm*.ipk openwrt/bin/targets/*/*
        tar -zcvf AllPackages.tar.gz openwrt/bin/packages
        mv AllPackages.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        tar -zcvf Packages.tar.gz packages
        rm -rf packages config.buildinfo feeds.buildinfo sha256sums version.buildinfo *.manifest Packages.tar.gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV    
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@master
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}  

    - name: 发布固件到奶牛快传
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "{url}={$(cat cowtransfer.log | grep https | cut -f3 -d" ")}" >> $GITHUB_OUTPUT

    - name: 发布固件到 WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "{url}={$(cat wetransfer.log | grep https | cut -f3 -d" ")}" >> $GITHUB_OUTPUT

    - name: 生成release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "{release_tag}={$(date +"%Y.%m.%d-%H%M")}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt
        echo "📥 固件下载" >> release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布固件到 Releases
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: R_${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ### **适用于x86 64位平台的OpenWrt固件**
          * **固件信息：**
          默认IP: `10.10.10.2`
          默认用户名: `root`
          默认密码: `空`
          * **更新说明：**
          自用固件，插件较少！
          如有其他需求，建议下载全插件版本固件！
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
          artifacts: ${{ env.FIRMWARE }}/*

    - name: 清理Actions空间
      uses: Mattraks/delete-workflow-runs@main
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          keep_minimum_runs: 0
          retain_days: 7
          #retain_days: ${{ github.event.inputs.action_days }}
        
    - name: 删除多余releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        repo: ${{ github.repository }}
        keep_latest: 3
        #keep_latest: ${{ github.event.inputs.rele }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 编译成功 Bark 推送
      uses: shink/bark-action@v2
      if: env.BARK == 'true' && steps.release.outputs.status == 'success' && !cancelled()
      with:
        key: ${{ secrets.BARK_KEY }}       # Your secret key, it is required
        host: ${{ secrets.BARK_HOST }}     # Your Bark host, the default is 'https://api.day.app'
        title: OpenWRT x86_64 位固件编译通知
        body: 楠神您好，您【AutoBuild-OpenWrt】仓库的 OpenWRT x86_64 位固件编译成功了！
        sound: telegraph
        isArchive: 1
        url: ${{ secrets.BARK_URL }}
        # automaticallyCopy: 1
        # copy: Content copied to clipboard
    